Course Processor Documentation - HTML Output Plugin
$Id$

Contact: chris@starforge.co.uk
Bugs: http://octette.cs.man.ac.uk/bugzilla/

1. Introduction

The HTML Output plugin takes the intermediate data format produced by the 
input plugins and converts the content into a course, integrating additional
data and creating a navigation framework for the themes, modules and steps 
using an XML metadata file to specify dependancies and interconnections.

Output plugins can always run on the intermediate data, by definition. Hence,
if there are multiple output plugins installed, you must specify which one to
use, either in the configuration file or on the command line (see reademe.txt)


2. File hierarchy layout

The HTML Output plugin is designed to produce courses that conform to a 
standard structure researched, designed and developed by PEVE IT over the
last 10 years. This structure places a nunber of requirements on your 
source data, in particular you must ensure that the directory hierarchy
conforms to the standard given in the documentation for the input handler(s)
your course material will be processed by.

In addition, each 'theme' directory (identified in the input handler 
documentation files by 'themeN', where 'N' is a digit) must contain a special
xml-based metadata.xml file that specifies the interdependencies between 
themes and modules in the course.


3. File Contents

3.1 Version information

The coursedata directory may contain a file called 'version.txt'. This file
should contain one line indicating the version number for the course. The 
format of this line is not important except that it MUST NOT contain " at 
any point. The version file may contain HTML but you are strongly advised to
execise caution when including HTML in the version file. The string in the
version file is appended with the process run time and date and then used to
replace ***version*** markers in the themeindex, theme map and step templates.
It is generally recommended that you use a simple number system such as

    1.3.1

or use a SVN Revision tag.


3.2 Header include file

The html output plugin provides the facility to specify your own header includes,
so that you can insert your own stylesheet or javascript content without the
need to directly edit the templates. 

If you need any custom content inserting into the generated page headers, place
them inside a file called 'headerinclude.txt' in the coursedata directory for
your course, and the processor will automatically detect, load, and insert its
contents into the headers of generated files.


4. Special tags

The HTML Output plugin provides a number of special markup tags in addition to 
those provided by your chosen authoring format input plugin. These tags may be 
used in all input formats. Tag arguments must be given in the form

name="value"

with literal speachmarks surrounding the value (DO NOT use &quot; or any form
of single quote). If the value needs to have an embedded ", use &quot; in that
case. All attribute names must be specified in lower case - uppercase or mixed 
case attribute names will be ignored.


4.1 Glossary tags

These are used to allow course author to create links within pages to a glossary 
entry defining a particular term or acronym

4.1.1 Usage

At least one instance of the term must be defined with definition text
somewhere in the CBT:

[glossary term="Page Text"]Definition[/glossary]

'Page Text' will appear in your document as a link to the glossary entry with
the specified Definition. It may include spaces and non-alphanumerics, however 
these may be stripped when creating anchors in the output so please ensure that
you take steps to prevent clashes between similar terms. 

Subsequent terms may be linked to the glossary by simply specifing the term 
in a closed tag with no definition:

[glossary term="Page Text" /]

4.1.2 Example

This course is authored in [glossary term="HTML"]Hyper Text Markup Language[/glossary]. 
In computing, [glossary term="HTML" /] is a markup language designed for the creation 
of web pages.


4.2 Popup tags

It is possible to make content appear in a popup that is opened when a user clicks 
on a link in a step.

4.2.1 Usage

[local text="link text" width="w" height="h"]popup text[/local]

The normal format of this tag may be used in any input format, 'link text'
appears in the step as the text the user clicks on to open the popup.  'popup
text' is the text that will appear in the popup - it may contain any characters
you require and any course processor tags except local, target and link.

[local text="link text" src="popup file" width="w" height="h" /]

This special format is only avilable in the HTMLInputHandler and it allows 
the contents of the popup to be specified in an external file. 'link text' is
as before, 'popup file' should be the relative path to the file containing 
the popup text. The file must be a .html file in a format understood by the
HTMLInputHandler itself (because the plugin actually loads the file and 
converts the tag to the normal format on the fly.)

In both forms the width and height attributes are optional. However, if provided
the attributes must be given in the order shown. This means that

[local text="foo" width="800" src="foo.html" height="600" /]

is NOT a valid tag. It must be rearranged to be

[local text="foo" src="foo.html" width="800" height="600" /]

4.2.2 Example

Knock, knock.
Who's there?
Dr.
[local text="Answer"]Dr. Who[/local]

Knock, knock.
Who's there?
Dr.
[local text="Answer" src="knockknock_popup.html" /]


4.3 Links and anchors

These tags allow the cross-linking of pages across the CBT without the need
to know in advance what the output filename of the target will be. When 
creating pages in HTML, users must not rely on the a element to create links
as html page names may be altered when passed through the course processor
therefore breaking any such links. Users must instead specify CBT-wide unique
targets for links using the [target ...] tag, and then create links to that 
target using the [link ...] tag.

4.3.1 Usage

The first step is to specify a target for links to refer to - targets may be 
linked to by many links, but they must be unique with the CBT. The name used
in 'anchorname' must not contain any spaces e.g. replace spaces with '_'

[target name="anchorname"]

Now you can place links to that target throughout your material:

[link to="anchorname"]link text[/link]

4.3.2 Example

In Theme 1, Module 2, Step 9 place a target...

[target name="basics_introductions_about_html"]

Then in Theme 5, Module 1, Step 2 it can be linked to...

Information about [link to="basics_introductions_about_html"]HTML[/link]
was presented at the beginning of this course.


4.4 Clear tag

The clear tag forces content to wrap to a new clear line when it wraps
along side other content (such as an image). This allows you to have a
block of text beside an image, a clear tag to force content to the next 
clear line and then more content below the image. These are replaced by
the course processor to become <div style="clear: both">&nbsp;</div>
This is primarily intended for use in the Latex input handler, but it
may appear in any.

4.4.1 Usage and example

[clear /]


4.5 Image tag

Used for specifying placement of images in a step, this tag usually 
relies on the presence of a file called imagelist in the root of the 
course to determine the type and dimensions of the image, if they are 
not specified manually. Authors creating pages in HTML can ignore this 
tag and use <img> elements directly in their content, although in all 
cases images must be placed in the images folder found in the top
level of the course framework (a measure intended to rpevent name-clashes
and make sharing images across module sor themes easier).

4.5.1 Usage

[img name="name" width="w" height="h" alt="text" align="text" /]

width, height are optional - if width or height are not specified then 
the image is included without any size information. align should be one 
of 'center', 'left' or 'right' and may be ommitted. 

4.5.2 Example

[img name="core" alt="Processor core" align="right" /]
[img name="bus.jpg" width="500" height="300" alt="A Bus" /]


4.6 Flash animation tag

Used to specify the placement of flash animations in a step, this tag usually
relies on the presence of a file called animlist in the root of the course
to determine the dimensions of the animation if they are not specified 
explicitly.  Authors creating pages in HTML may choose to ignore this tag 
and placeanimations directly into their HTML pages, although in all cases
animations (.swf files) must be placed in the correct top-level anims folder.

4.6.1 Usage

[anim name="name" width="w" height="h" align="text" /]

width and height are optional - if width or height are not specified then
the anim identified by name must be listed in the animlist file (see 
4.6.3) and name must not contain the .swf extension. NOTE: This behaviour is
deprecated any may be removed in future versions!  align should be one 
of center, left or right and is optional, if not specified it defaults to 
center.

4.6.2 Example

[anim name="processor.swf" width="300" height="400" align="left" /]
[anim name="processor" align="left" /]

4.6.3 animlist file - DEPRECATED

When inserting anim tags without width and height the processor will 
attempt to obtain that information from a file called 'animlist' stored
in the coursedata directory. The animlist file should contain the 
following data, one line per image:

animname width height

animname should be the filename of the image *without any extension*,
width and height should be the width and height of the anim in pixels.
For example:

processor 300 400


4.7 Applet tag

Allows the placement of java applets in steps. As with anims and images,
this will often require the presence of a top-level appletlist file to
determine the dimensions of the applet  Authors creating pages in HTML 
can ignore this tag and place applets directly into their HTML pages, 
although in all cases applets must be placed in the correct top-level 
applets folder. Note that, at present, only single-class applets are
supported, more complex applet support where both a class and jar may
be specified is in development.

4.7.1 Usage

[applet name="" width="" height="" align="" /]

width and height are optional - if width or height are not specified then
the applet identified by name must be listed in the appletlist file (see 
4.7.3) and name must not contain any extension.  NOTE: This behaviour is
deprecated any may be removed in future version! align should be one 
of center, left or right and is optional, if not specified it defaults to 
center.

4.7.2 Example

[applet name="simulator" width="600" height="200" align="center" /]


5. Metadata

Each theme directory in the coursedata must contain a file called metadata.xml;
a file that describes the theme modules and the links between them in a format
the course processor can understand. The contents of the metadata should
conform to XML standards with the added restriction that all element and
attribut names must be specified in lowercase or the processor will not
parse them correctly. All the elements distinguish between 'names' and 'titles'
in the same way: names are the physical directory names used for the theme
or modules while titles are the human-readable descriptive titles associated
with the element. Ordering of attributes within elements is irrelivant.

5.1 The METADATA element

The root of the metadata is the METADATA element. This element defines the theme
name and title and acts as a container for MODULE elements. Each metadata file
must contain exactly one METADATA element.

5.1.1 Attributes

name       - the name of the theme directory on the filesystem.
title      - the human-readable theme title.
indexorder - location in the course-wide index, should be numeric and each
             theme should have a unique value.

name must contain the physical name of the theme directory and it is case 
sensitive. For example, in the metadata file shown in the example in section 2,
the METADATA element would look like:

<metadata name="Balsa" title="Introduction to Balsa" indexorder="1">
    ...
</metadata>


5.2 The MODULE element

The METADATA element acts as a container for one or more MODULE elements, 
each MODULE element corresponds to one module in the theme. Each MODULE 
element may OPTIONALLY contain at most one LEADSTO element and at most
one PREREQUISITES element.

5.2.1 Attributes

name       - name pf the module directory on the filesystem
title      - Human-readable module title
level      - module difficulty/specialisation.
indexorder - location in the flat theme index, should be numeric and each
             module should have a unique value.

name must contain the physical name of the theme directory and it is case 
sensitive. level should contain eithr 'green', 'yellow', 'orange' or 'red'
depending on the difficulty or specialisation of the module in question.
For example:

<module title="Introducing Balsa" name="balsa_1" level="green" indexorder="1">
    ...
</module>
<module title="Simple Balsa examples" name="balsa_2" level="green" indexorder="2">
    ...
</mooule>


5.3 The PREREQUISITE element

Each module may contain AT MOST one prerequisite element. The PREREQUISITE
element allows the course author to list the modules the student should have
studied prior to studying the current module. The PREREQUISITE element must
contain at least one TARGET element. A PREREQUISITE element without any TARGET
elements will cause the processor to halt with an error - if a module has
no prerequisites, ommit the PREREQUISITES element entirely.

5.2.1 Attributes
    
None. This element is a container only. It should be used as:

<module title="Simple Balsa examples" name="balsa_2" level="green" indexorder="2">
    <prerequisites>
        <target>balsa_1</target>
    </prerequisites>
</mooule>


5.4 The LEADSTO element

Each module may contain AT MOST one prerequisite element. The LEADSTO
element allows the course author to list the modules the student can study
after studying the current module. The LEADSTO element must contain at least 
one TARGET element. A LEADSTO element without any TARGET elements will cause 
the processor to halt with an error - if a module has no leadstos, ommit the 
LEADSTOS element entirely.

Note that the course processor DOES NOT automatically make a prerequisite
in the target module if you specify a leadsto to it, links in both directions
must be set up manually at this point.

5.4.1 Attributes
    
None. This element is a container only. It should be used as:

<module title="Introducing Balsa" name="balsa_1" level="green" indexorder="1">
    <leadsto>
        <target>balsa_2</target>
    </leadsto>
</module>
